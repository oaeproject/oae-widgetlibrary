<% content_for :title do %> - SDK - Intro<% end %>
<div id="helloworld" class="widgetsdk_container">
    <h1>Intro</h1>
    <p>This tutorial will walk you through building a relatively simple widget called 'My Hello World'. My Hello World is a dashboard widget that says hello to the current user with text in the colour of their choosing:</p>

    <%= image_tag "developer_helloworld_example.png", :alt => "My Hello World" %>

    <p>Make sure your development environment is set up so you can create the My Hello World widget and run it within Sakai OAE on your machine|:</p>

    <p><%= link_to "Quick set up", "/sdk/developwidget/quickdevsetup", :class => "wl-regular-link wl-bold" %> if you have Java and git installed.<br/>
    <%= link_to "Full set up", "/sdk/developwidget/fulldevsetup", :class => "wl-regular-link wl-bold" %> if you don't have any of these tools installed.</p>
    
    <p>The My Hello World widget is identical to the Hello World widget (except the name and ID of the widget) included in the 3akai-UX code distribution at 3akai-ux/devwidgets/helloworld. For the purposes of this tutorial we are using My Hello World (and corresponding myhelloworld ID) so you can create a new widget while referencing the provided Hello World widget if necessary.</p>

    <h1>Step 1: <b>Set up the widget file structure</b></h1>
    <p>Almost all widgets consist of the same types of files. You must follow the widget file structure pattern described below for your widgets to function properly.</p>
    <ul class="inline_list">
        <li>Create a <b><i>myhelloworld directory</i></b> within the 3akai-ux/devwidgets directory.</li>
        <li>Copy the contents of the <b><i>3akai-ux/devwidgets/_template</i></b> directory into your <i>myhelloworld</i> directory.</li>
        <li>The _template directory contains the basic files that all widgets need along with documentation about how to build those files. You should always start new widgets using the template files.</li>
        <li>Rename the files that contain <i>WIDGET_ID</i> in their name, replacing <i>WIDGET_ID</i> with myhelloworld.</li>
        <li>Create an images directory in the <i>myhelloworld</i> directory, copy over <i>3akai-ux/devwidgets/helloworld/images/helloworld_icon.png</i> and rename it to <i>myhelloworld_icon.png</i>.</li>
    </ul>

    <p>Your <i>myhelloworld</i> directory should now look like this:</p>

    <%= image_tag "developer_helloworld_directorystructure.png", :alt => "My Hello World directory structure" %>

    <p>All widgets should use this set of directories and files though some may be unnecessary (i.e. images, CSS). Of course, the names should match the ID of the widget. In this case, the ID for the My Hello World widget is <i>myhelloworld</i>. Let's take a look at the purpose of these directories and files:</p>

    <ul class="widgetsdk_treelist">
        <li>3akai-ux: contains all Sakai OAE frontend code
            <ul>
                <li>devwidgets: contains all Sakai OAE widgets
                    <ul>
                        <li>myhelloworld: contains all My Hello World widget code
                            <ul>
                                <li>bundles: contains files used to internationalize the interface of this widget
                                    <ul>
                                        <li>default.properties: a listing of key-value pairs that define internationalizable keys and their string values to be used in the default widget interface</li>
                                    </ul>
                                </li>
                                <li>config.json: a JSON object that defines the widget's essential properties such as name, id, url and more</li>
                                <li>css: contains CSS files used for this widget
                                    <ul>
                                        <li>myhelloworld.css: the main CSS file for the My Hello World widget defining any styles specifically for this widget</li>
                                    </ul>
                                </li>
                                <li>myhelloworld.html: the main HTML file for the My Hello World widget defining the layout of the widget</li>
                                <li>images: contains images for this widget
                                    <ul>
                                        <li>myhelloworld_icon.png: the icon that appears in the header bar of the dashboard widget</li>
                                    </ul>
                                </li>
                                <li>javascript: contains JavaScript files for this widget
                                    <ul>
                                        <li>myhelloworld.js: the main JavaScript file for the My Hello World widget defining the dynamic behaviors of the widget</li>
                                    </ul>
                                </li>
                            </ul>
                        </li>
                    </ul>
                </li>
            </ul>
        </li>
    </ul>

    <h1>Step 2: <b>Configure the widget</b></h1>
    <p>To let Sakai OAE know about our new widget, we need to set certain configuration parameters.</p>
    <p>This is done by editing the widget's <i>config.json</i> file that the Sakai OAE frontend code reads to know which widgets are available (you can see all registered Sakai OAE widgets at http://localhost:8080/var/widgets.json). All widgets must have a <i>config.json</i> file.</p>
    <p>Here is the <i>config.json</i> you will need for My Hello World (minus the comments from the template file for brevity):</p>

    <div class="navigationalitems_codesnippit_container">
        <div class="navigationalitems_codesnippit_header"><h4>config.json</h4></div>
        
<pre class="green">
<span class="grey">{</span>
    <span>"enabled":                <span class="blue">true,</span>
    <span>"groupdashboard":         <span class="blue">false,</span>
    <span>"grouppages":             <span class="grey">false,</span>
    <span>"hasSettings":            <span class="grey">true,</span>
    <span>"i18n": <span class="grey">{</span></span>
        <span>default": <span class="grey">{</span></span>
            <span>"bundle":         "/devwidgets/myhelloworld/bundles/default.properties",</span>
            <span>"name":           "My Hello world",</span>
            <span>"description":    "Sakai OAE widget SDK demonstration widget"</span>
        <span class="grey">}</span>
    <span class="grey">},</span>
    <span>"id":                     <span class="codesnippet_right_value">"myhelloworld",</span>
    <span>"personalportal":         <span class="blue">false,</span>
    <span>"showinsakaigoodies":     <span class="blue">false,</span>
    <span>"type":                   "sakai",</span>
    <span>"url":                    "/devwidgets/myhelloworld/myhelloworld.html",</span>
    <span>"userdashboard":          <span class="blue">false,</span>
    <span>"userpages":              <span class="blue">false</span>
<span class="grey">}</span>
</pre>
</div>

    <p>As you can see, the configuration options are listed in alphabetical order. When creating JSON or properties lists of key-value pairs, it is best to try and alphabetize the keys so the lists are easier to read and specific properties are easier to find.</p>

    <p>Here is a quick description of the configuration options you see here:</p>

    <ul class="inline_list">
        <li><b>description</b> - string: a short description of the widget that may be displayed to users</li>
        <li><b>enabled</b> - true | false: sets whether or not this widget may be usable by Sakai OAE</li>
        <li><b>groupdashboard</b> - true | false: sets whether or not this widget can be placed in a group's dashboard pages</li>
        <li><b>grouppages</b> - true | false: sets whether or not this widget can be placed in a group's standard pages (showinsakaigoodies must also be enabled to access this widget from the page editor)</li>
        <li><b>hasSettings</b> - true | false: sets whether or not this widget has a settings menu option to allow users to configure or change the widget's settings. Since we want the user to be able to change the color of the text, we set hasSettings to true.</li>
        <li><b>i18n</b> - JSON object: sets the location of internationalization (abbreviated as 'i18n') files for this widget. Since we have a default properties file, we list its location here.</li>
        <li><b>id</b> - string: a short, unique identifier for this widget. This ID should be used as the widget's directory name as well as the widget's main HTML template, CSS file and JavaScript file names. It should also be used throughout the widget code and other places in the Sakai OAE codebase to refer to this widget.</li>
        <li><b>name</b> - string: a short name for the widget that is displayed to users. Since this is a dashboard widget, the name will appear in the widget's header bar</li>
        <li><b>personalportal</b> - true | false: sets whether or not this widget may be used on a user's personal portal (more commonly known as 'My Sakai'). This is the page a user is taken to when they log in (/dev/my_sakai.html). This property is not included in the helloworld config.json because we do not want to include a demonstration widget in My Sakai by default. For the purposes of this tutorial, we will test My Hello World on the My Sakai page.</li>
        <li><b>showinsakaigoodies</b> - true | false: sets whether or not this widget may appear in the list of widgets that can be placed on either a standard group or user page (either grouppages or userpages must also be enabled to access this widget from the page editor)</li>
        <li><b>type</b> - "core" | "sakai" | "contrib": core widgets are essential for Sakai OAE to function properly (i.e. login, uploadcontent). sakai widgets are not essential for Sakai OAE to function properly, but are shipped with the main codebase (i.e. discussion, video). contrib widgets are written by individuals and institutions outside the core Sakai OAE team and contributed back to the Sakai OAE project.</li>
        <li><b>url</b> - string: the location of the main HTML template that should be loaded when Sakai OAE wants to display the widget</li>
        <li><b>userdashboard</b> - true | false: sets whether or not this widget can be placed in a user's dashboard pages</li>
        <li><b>userpages</b> - true | false: sets whether or not this widget can be placed in a user's standard pages (showinsakaigoodies must also be enabled to access this widget from the page editor)</li>
    </ul>
</div>