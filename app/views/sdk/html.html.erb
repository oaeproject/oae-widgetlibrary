<% content_for :title do %> - SDK - HTML<% end %>
<div id="codingstandards" class="widgetsdk_container">
    <h1>HTML</h1>
    <p>Follow these simple few rules and you will be creating your own widgets for others to use on their Sakai platform.</p>
    <div class="wl-widget-item first">
        <h3>A more in-depth guide on Sakai OAE Widget SDK coding standards will be coming soon.</h3>
        <p>If you:</p>
        <ul class="inline_list">
            <li>start all your widgets using the template files provided in the <i>3akai-ux/devwidgets/_template</i> directory,</li>
            <li>follow the namespacing standards below and,</li>
            <li>follow the patterns mentioned in the <%= link_to "Hello World Tutorial", "/sdk/developwidget/learnbasics", :class => "wl-regular-link" %>,</li>
        </ul>
        <p>you should be just fine. The guidelines in the above resources should be considered the most up-to-date. If you have any questions about coding standards, please feel free to comment on this page or <%= link_to "contact", "/sdk/contact", :class => "wl-regular-link" %> the Sakai OAE developers.</p>
        <h2>Name spacing</h2>
        <p>It is very important to remember that widgets are designed to be embedded within other pages. A page that includes widget X may contain other widgets and may even contain multiple instances of widget X itself. For this reason, it is important to take certain measures to prevent naming clashes with other widgets. If you look at the Hello World Tutorial you will find that:</p>

        <ul class="inline_list">
            <li>All HTML element classes and ids begin with the widget's id: <i>myhelloworld</i>:</li>
        </ul>

        <div class="navigationalitems_codesnippit_container">
            <div class="navigationalitems_codesnippit_header"><h4>Properly namespacing HTML element classes and IDs</h4></div>

<pre class="prettyprint">
&lt;div class="myhelloworld_widget"&gt;
    ...
    &lt;div id="myhelloworld_main"&gt;
        ...
    &lt;/div&gt;

    &lt;div id="myhelloworld_settings"&gt;
        ...
    &lt;/div&gt;
    ...
&lt;/div&gt;
</pre>
        </div>

        <ul class="inline_list">
            <li>all JavaScript references to HTML elements are constrained to the unique container of the widget (all instances of a widget, even instances of the same widget, are provided with unique ids):</li>
        </ul>

        <div class="navigationalitems_codesnippit_container">
            <div class="navigationalitems_codesnippit_header"><h4>Properly selecting elements in JavaScript</h4></div>
<pre class="prettyprint" class="javascript">
// tuid is passed in as this widget's unique id

// unique container for each widget instance
var $rootel = $('#' + tuid);

// jQuery's search for the element with an id of myhelloworld_main is
// limited to within the $rootel container:
var $mainContainer = $('#myhelloworld_main', $rootel);

// more jQuery HTML elements
var $settingsContainer = $('#myhelloworld_settings', $rootel);
var $settingsForm = $('#myhelloworld_settings_form', $rootel);
var $colorPicker = $('#myhelloworld_color', $rootel);
var $usernameContainer = $('#myhelloworld_username', $rootel);
</pre>
        </div>
    </div>
    <%= render :partial => "sdk/feedback" %>
</div>