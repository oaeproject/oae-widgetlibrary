<% content_for :title do %> - SDK - Front-end services<% end %>
<div id="frontend" class="widgetsdk_container">
    <h1>Front-end services</h1>
    <p>Sakai OAE has a number of API functions available that should be used to build the interface of your widgets. A full list of API functions will be coming soon, but documentation on some of the most used frontend Widget API functions are provided below.</p>
    <p>If you are looking for API functions to communicate with the Sakai OAE server, check out the Backend Services page.</p>

<ul class="widgetsdk_treelist">
    <li><a class="wl-regular-link" title="" href="#utility">Utility functions (sakai.api.Util.*)</a></li>
    <ul>
        <li><a class="wl-regular-link" title="Activity" href="#activity">Activity</a>
            <ul>
                <li><a class="wl-regular-link" title="createActivity" href="#createactivity">createActivity</a></li>
            </ul>
        </li>
        <li><a class="wl-regular-link" title="applyThreeDots" href="#applythreedots">applyThreeDots</a></li>
        <li><a class="wl-regular-link" title="AutoSuggest" href="#autosuggest">AutoSuggest</a>
            <ul>
                <li><a class="wl-regular-link" title="setup" href="#setup">setup</a></li>
                <li><a class="wl-regular-link" title="setuptagandcategoryautosuggest" href="#setup">setupTagAndCategoryAutosuggest</a></li>
            </ul>
        </li>
        <li><a class="wl-regular-link" title="convertToHumanReadableFileSize" href="#converttohumanreadablefilesize">convertToHumanReadableFileSize</a></li>
        <li><a class="wl-regular-link" title="Draggable" href="#draggable">Draggable</a>
            <ul>
                <li><a class="wl-regular-link" title="setupDraggable" href="#setupdraggable">setupDraggable</a></li>
            </ul>
        </li>
        <li><a class="wl-regular-link" title="Droppable" href="#droppable">Droppable</a>
            <ul>
                <li><a class="wl-regular-link" title="setupDroppable" href="#setupdroppable">setupDroppable</a></li>
            </ul>
        </li>
        <li><a class="wl-regular-link" title="formatTagsh" href="#formattags">formatTags</a></li>
        <li><a class="wl-regular-link" title="Forms" href="#forms">Forms</a>
            <ul>
                <li><a class="wl-regular-link" title="validate" href="#validate">validate</a></li>
            </ul>
        </li>
        <li><a class="wl-regular-link" title="hideOnClickOut" href="#hideonclickout">hideOnClickOut</a></li>
        <li><a class="wl-regular-link" title="notification" href="#notification">notification</a>
            <ul>
                <li><a class="wl-regular-link" title="show" href="#show">show</a></li>
            </ul>
        </li>
        <li><a class="wl-regular-link" title="parseRFC822Date" href="#parserfc822date">parseRFC822Date</a></li>
        <li><a class="wl-regular-link" title="parseSakaiDate" href="#parsesakaidate">parseSakaiDate</a></li>
        <li><a class="wl-regular-link" title="progressIndicator" href="#progressIndicator">progressIndicator</a>
            <ul>
                <li><a class="wl-regular-link" title="showProgressIndicator" href="#showprogressIndicator">showProgressIndicator</a></li>
                <li><a class="wl-regular-link" title="hideProgressIndicator" href="#hideprogressIndicator">hideProgressIndicator</a></li>
            </ul>
        </li>
        <li><a class="wl-regular-link" title="renderMath" href="#rendermath">renderMath</a></li>
        <li><a class="wl-regular-link" title="tagEntity" href="#tagentity">tagEntity</a></li>
        <li><a class="wl-regular-link" title="TemplateRenderer" href="#templaterenderer">TemplateRenderer</a></li>
    </ul>
</ul>

    <div class="wl-widget-item">
        <a name="utility"><h1>Utility functions (sakai.api.Util.*)</h1></a>
        <p>General utility functions which implement commonly used low level operations and unifies practices across codebase.</p>
        <a name="activity"><h2>Activity</h2></a>
        <a name="createactivity"><h3>createActivity</h3></a>
        <p>Wrapper function for creating a Nakamura activity</p>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.Activity.createActivity(nodeUrl, appID, templateID, extraData, callback)",
            :description => "Creates an activity in Nakamura",
            :parameters => "<strong>nodeUrl</strong>    {String}   // The URL of the node we would like the activity to be stored on
<strong>appID</strong>      {String}   // The ID of the application/functionality creating the activity
<strong>templateID</strong> {String}   // The ID of the activity template
<strong>extraData</strong>  {Object}   // Any extra data which will be stored on the activity node
<strong>callback</strong>   {Function} // Callback function executed at the end of the operation",
            :callback => "<strong>callback</strong> {Function} // Function executed after operation is complete,
                    // given the returned data (Object) and a success indicator (Boolean)

e.g. <span class='black'>callback(<span class='blue'>responseData</span>, <span class='blue'>success</span>);<span class='black'>",
            :example => "var activityData = {
    \"sakai:activityMessage\": \"Bert Pareyn updated the description\"
};
sakai.api.Activity.createActivity(\"/p/JexeDwb\", \"content\", \"default\", activityData, function(responseData, success){
    if (success) {
        $(window).trigger(\"updateContentActivity.entity.sakai\", activityMessage);
    }
});"
            }
        } %>

        <a name="applythreedots"><h2>applyThreeDots</h2></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.applyThreeDots(body, width, params, optClass, alreadySecure)",
            :description => "Truncate a string of text using the threedots plugin",
            :parameters => "<strong>body</strong>          {String}  // String of text to be truncated
<strong>width</strong>         {int}     // Width of the parent element
<strong>params</strong>        {Object}  // Object containing parameters, Threedots plugin specific.
                        // The row limit for widget headers should be 4 rows.
<strong>optClass</strong>      {String}  // Optional class(es) to give container div. Used to give
                        // specific mark-up to the content to avoid wrong calculations.
                        // e.g. s3d-bold
<strong>alreadySecure</strong> {Boolean} // Optional, if the content needs to be run through safeOutput
                        // the Boolean should be set to true",
            :callback => "<strong>dotted</strong> {String} // String passed through the threedots API;

e.g. return \"The quick brown fo...\";",
            :example => "sakai.api.Util.applyThreeDots(\"The quick brown fox jumps over the lazy dog\", 100, {
    whole_word: false
}, \"s3d-bold\");"
            }
        } %>

        <a name="autosuggest"><h2>AutoSuggest</h2></a>
        <a name="setup"><h3>setup</h3></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.AutoSuggest.setup(element, options, callback, _dataFn)",
            :description => "Set up the Autosuggest for users and groups",
            :parameters => "<strong>element</strong>  {String|Object} // jQuery selection object or selector string.
<strong>options</strong>  {Object}        // JavaScript Object of optional parameters to extend or
                         // override defaults
<strong>callback</strong> {Function}      // Optional Callback to be executed after calling autosuggest
                         // plugin
<strong>_dataFn</strong>  {Function}      // Optional Function that pre-fetches data list for
                         // the autosuggest box",
            :callback => "<strong>obj</strong> {Object} // new jQuery object with autosuggest",
            :example => "var dataFn = function(query, add) {
    var q = 'query';
    var options = {
        'page': 0,
        'items': 15,
        'q': q,
        'userid': sakai.data.me.user.userid
    };
    var searchUrl = sakai.config.URL.POOLED_CONTENT_SPECIFIC_USER;

    sakai.api.Server.loadJSON(searchUrl.replace(\".json\", \"\"), function(success, data){
        if (success) {
            var suggestions = [];
            $.each(data.results, function(i) {
                suggestions.push(dataObj);
            });
            add(suggestions, query);
        }
    }, options);
};

sakai.api.Util.AutoSuggest.setup($(\"autosuggest_box\"), {
    retrieveLimit: 10
}, false, dataFn);"
            }
        } %>

        <a name="setuptagandcategoryautosuggest"><h3>setupTagAndCategoryAutosuggest</h3></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.AutoSuggest.setupTagAndCategoryAutosuggest($elt, options, $list_categories_button, initialSelections, callback)",
            :description => "Set up the tag + category autosuggest box",
            :parameters => "<strong>$elt</strong>                    {jQuery}   // The element to set up as the autosuggest box
<strong>options</strong>                 {Object}   // Options to pass through to the autoSuggest setup
<strong>$list_categories_button</strong> {jQuery}   // The button that should trigger the assignlocation
                                   // overlay
<strong>initialSelections</strong>       {Array}    // The inital selections for the autosuggest, direct
                                   // from the profile
<strong>callback</strong>                {Function} // Function to call after setup is complete",
            :callback => "None",
            :example => "sakai.api.Util.AutoSuggest.setupTagAndCategoryAutosuggest($(\".autosuggest_box\", $rootel), {
    scrollHeight: 120
}, $(\".autosuggest_location_button\", $rootel));"
            }
        } %>


        <a name="converttohumanreadablefilesize"><h2>convertToHumanReadableFileSize</h2></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.convertToHumanReadableFileSize(filesize)",
            :description => "Convert a file's size to a human readable size",
            :parameters => "<strong>filesize</strong> {Integer} // The file's size to convert",
            :callback => "<strong>size</strong> {String} // Filesize in readable format and localized
            
e.g. return '4.5 MB';",
            :example => "sakai.api.Util.convertToHumanReadableFileSize(result[\"_length\"]);"
            }
        } %>

        <a name="draggable"><h2>Draggable</h2></a>
        <a name="setupdraggable"><h3>setupDraggable</h3></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.Draggable.setupDraggable(params, $container)",
            :description => "Sets up draggables across the page or given container",
            :parameters => "<strong>params</strong> {Object}     // Optional parameters that override defaults
<strong>$container</strong> {Object} // container element to add draggables, defaults to 
                    // $(\"html\") if not set",
            :callback => "None",
            :example => "sakai.api.Util.Draggable.setupDraggable({
    helper: \"clone\",
    cursor: \"hand\"
}, $(\"#container_to_apply_to\"));


// Setting parameters can also be achieved through the data object in HTML.
// This HTML is automatically picked up by the API on render of the page
// but can not be applied to templates rendered after initial page load.
<pre id=\"html\" class=\"prettyprint\">&lt;div id=\"container_to_apply_to\"&gt;
    &lt;ul&gt;
        &lt;li class=\"s3d-draggable-container\" data-helper=\"clone\" data-cursor=\"hand\"&gt;
            ...
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;</pre>"}
        } %>

        <a name="droppable"><h2>Droppable</h2></a>
        <a name="setupdroppable"><h3>setupDroppable</h3></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.Droppable.setupDroppable(params, $container)",
            :description => "Sets up containers that allow dropping of elements on them across the page or given container",
            :parameters => "<strong>params</strong> {Object}     // Optional parameters that override defaults
<strong>$container</strong> {Object} // container element to add droppable containers, defaults to 
                    // $(\"html\") if not set",
            :callback => "None",
            :example => "sakai.api.Util.Droppable.setupDroppable({
    tolerance: \"touch\",
    hoverClass: \"custom_class\"
}, $(\"#container_to_apply_to\"));


// Setting parameters can also be achieved through the data object in HTML.
// This HTML is automatically picked up by the API on render of the page
// but can not be applied to templates rendered after initial page load.
<pre id=\"html\" class=\"prettyprint\">&lt;div id=\"container_to_apply_to\"&gt;
    &lt;div class=\"s3d-droppable-container\" data-tolerance=\"touch\" data-hoverClass=\"custom_class\"&gt;
        ...
    &lt;/div&gt;
&lt;/div&gt;</pre>"}
        } %>

        <a name="formattags"><h2>formatTags</h2></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.formatTags(inputTags)",
            :description => "Formats a comma separated string of text to an array of usable tags, filters out unwanted tags (e.g. empty tags), returns the array of tags and if no tags were provided or none were valid an empty array is returned",
            :parameters => "<strong>inputTags</strong> {Object}     // Unformated, comma separated, string of tags put in
                       // by a user",
            :callback => "tags {Array} // Array of formatted tags

e.g. return [\"Physics\", \"Advanced Mathematics 101\", \"Biology 201\";",
            :example => "var inputTags = $(\"#metadata_tag_input_field\").val();

debug.log(inputTags);
// \"  Physics   ,   , ,  Advanced Mathematics 101, , Biology 201  \"

var formattedTags = sakai.api.Util.formatTags(inputTags);

debug.log(formattedTags);
 // [\"Physics\", \"Advanced Mathematics 101\", \"Biology 201\"]"}
        } %>

        <a name="forms"><h2>Forms</h2></a>
        <a name="validate"><h3>validate</h3></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.formatTags(inputTags)",
            :description => "A wrapper for jquery.validate with a custom Sakai OAE styling.",
            :parameters => "<strong>$form</strong> {Object} // $form the jQuery element of the form in question
<strong>opts</strong> {Object}  // options to pass through to jquery.validate
               // NOTE: There is one additional option you can pass in
               // an error callback function
               // When there is an error in validation detected, it will be called
<strong>insertAfterLabel</strong> {Boolean} // Insert the error span after the label, not before",
            :callback => "None",
            :example => "var validateOpts = {
    rules: {
        password: {
            minlength: 4
        },
        password_repeat: {
            equalTo: \"#password\"
        },
        username: {
            minlength: 3,
            nospaces: true,
            validusername: true
        }
    },
    messages: {
        username: {
            required: $(\"#username_empty\").text(),
            minlength: $(\"#username_short\").text(),
            nospaces: $(\"#username_spaces\").text()
        },
        password: {
            required: $(\"#password_empty\").text(),
            minlength: $(\"#password_short\").text()
        }
    },
    submitHandler: function(form, validator){
        doLogin();
        return false;
    }
};

sakai.api.Util.Forms.validate($(\"#create_account_form\"), validateOpts, true);"}
        } %>

        <a name="hideonclickout"><h2>hideOnClickOut</h2></a>
        <p></p>

        <a name="notification"><h2>notification</h2></a>
        <a name="show"><h3>show</h3></a>
        <p></p>

        <a name="parserfc822date"><h2>parseRFC822Date</h2></a>
        <p></p>

        <a name="parsesakaidate"><h2>parseSakaiDate</h2></a>
        <p></p>

        <a name="progressIndicator"><h2>progressIndicator</h2></a>
        <a name="showprogressIndicator"><h3>showProgressIndicator</h3></a>
        <p></p>
        <a name="hideprogressIndicator"><h3>hideProgressIndicator</h3></a>
        <p></p>

        <a name="rendermath"><h2>renderMath</h2></a>
        <p></p>

        <a name="tagentity"><h2>tagEntity</h2></a>
        <p></p>

        <a name="templaterenderer"><h2>TemplateRenderer</h2></a>
        <p></p>
    </div>


    <div class="wl-widget-item">
        <h3 class="wl-regular-link no_decoration wl-normal">Widgets</h3>
        <p>Sakai OAE manages widgets dynamically in the frontend code and provides API functions to inform Sakai OAE when your widget is ready to be run and when your widget changes state.</p>
        <i><h4>sakai.api.Widgets.widgetLoader.informOnLoad(widgetname)</h4></i>

        <p>This function must be called at the end of your widget's JavaScript to inform Sakai OAE that the widget is ready to run. Once called, the given widget will be run.</p>

        <h5>Arguments</h5>
        <ul class="inline_list">
            <li>String widgetname - the id of the widget as defined in the widget's config.json file (e.g. myhelloworld, sites, myprofile, video, ...)</li>
        </ul>

        <h5>Return</h5>
        <ul class="inline_list">
            <li>
                None.
            </li>
        </ul>

        <h5>Example</h5>
        <p>On the last line of all widgets, you will find a call to sakai.api.Widgets.widgetLoader.informOnLoad(). For example, in the <%= link_to "Hello World Tutorial", "/sdk/developwidget/learnbasics", :class => "wl-regular-link" %>:</p>
        
        <div class="navigationalitems_codesnippit_container">
            <div class="navigationalitems_codesnippit_header"><h4>/devwidgets/myhelloworld/javascript/myhelloworld.js, line 187</h4></div>
<pre class="black">
<span class="grey">// inform Sakai OAE that this widget has loaded and is ready to run</span>
sakai.api.Widgets.widgetLoader.informOnLoad(<span class="green">"myhelloworld"</span>);
</pre>
        </div>
    </div>



</div>