<% content_for :title do %> - SDK - Front-end services<% end %>
<div id="frontend" class="widgetsdk_container">
    <h1>Front-end services</h1>
    <p>Sakai OAE has a number of API functions available that should be used to build the interface of your widgets. A full list of API functions will be coming soon, but documentation on some of the most used frontend Widget API functions are provided below.</p>
    <p>If you are looking for API functions to communicate with the Sakai OAE server, check out the Backend Services page.</p>

<ul class="widgetsdk_treelist">
    <li><a class="wl-regular-link" title="" href="#utility">Utility functions (sakai.api.Util.*)</a></li>
    <ul>
        <li><a class="wl-regular-link" title="Activity" href="#activity">Activity</a>
            <ul>
                <li><a class="wl-regular-link" title="createActivity" href="#createactivity">createActivity</a></li>
            </ul>
        </li>
        <li><a class="wl-regular-link" title="applyThreeDots" href="#applythreedots">applyThreeDots</a></li>
        <li><a class="wl-regular-link" title="AutoSuggest" href="#autosuggest">AutoSuggest</a>
            <ul>
                <li><a class="wl-regular-link" title="setup" href="#setup">setup</a></li>
                <li><a class="wl-regular-link" title="setuptagandcategoryautosuggest" href="#setup">setupTagAndCategoryAutosuggest</a></li>
            </ul>
        </li>
        <li><a class="wl-regular-link" title="convertToHumanReadableFileSize" href="#converttohumanreadablefilesize">convertToHumanReadableFileSize</a></li>
        <li><a class="wl-regular-link" title="Draggable" href="#draggable">Draggable</a>
            <ul>
                <li><a class="wl-regular-link" title="setupDraggable" href="#setupdraggable">setupDraggable</a></li>
            </ul>
        </li>
        <li><a class="wl-regular-link" title="Droppable" href="#droppable">Droppable</a>
            <ul>
                <li><a class="wl-regular-link" title="setupDroppable" href="#setupdroppable">setupDroppable</a></li>
            </ul>
        </li>
        <li><a class="wl-regular-link" title="formatTagsh" href="#formattags">formatTags</a></li>
        <li><a class="wl-regular-link" title="Forms" href="#forms">Forms</a>
            <ul>
                <li><a class="wl-regular-link" title="validate" href="#validate">validate</a></li>
            </ul>
        </li>
        <li><a class="wl-regular-link" title="hideOnClickOut" href="#hideonclickout">hideOnClickOut</a></li>
        <li><a class="wl-regular-link" title="notification" href="#notification">notification</a>
            <ul>
                <li><a class="wl-regular-link" title="show" href="#show">show</a></li>
            </ul>
        </li>
        <li><a class="wl-regular-link" title="parseSakaiDate" href="#parsesakaidate">parseSakaiDate</a></li>
        <li><a class="wl-regular-link" title="progressIndicator" href="#progressIndicator">progressIndicator</a>
            <ul>
                <li><a class="wl-regular-link" title="showProgressIndicator" href="#showprogressIndicator">showProgressIndicator</a></li>
                <li><a class="wl-regular-link" title="hideProgressIndicator" href="#hideprogressIndicator">hideProgressIndicator</a></li>
            </ul>
        </li>
        <li><a class="wl-regular-link" title="renderMath" href="#rendermath">renderMath</a></li>
        <li><a class="wl-regular-link" title="tagEntity" href="#tagentity">tagEntity</a></li>
        <li><a class="wl-regular-link" title="TemplateRenderer" href="#templaterenderer">TemplateRenderer</a></li>
    </ul>
</ul>

    <div class="wl-widget-item">
        <a name="utility"><h1>Utility functions (sakai.api.Util.*)</h1></a>
        <p>General utility functions which implement commonly used low level operations and unifies practices across codebase.</p>
        <a name="activity"><h2>Activity</h2></a>
        <a name="createactivity"><h3>createActivity</h3></a>
        <p>Wrapper function for creating a Nakamura activity</p>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.Activity.createActivity(nodeUrl, appID, templateID, extraData, callback)",
            :description => "Creates an activity in Nakamura",
            :parameters => "<strong>nodeUrl</strong>    {String}   // The URL of the node we would like the activity to be stored on
<strong>appID</strong>      {String}   // The ID of the application/functionality creating the activity
<strong>templateID</strong> {String}   // The ID of the activity template
<strong>extraData</strong>  {Object}   // Any extra data which will be stored on the activity node
<strong>callback</strong>   {Function} // Callback function executed at the end of the operation",
            :callback => "<strong>callback</strong> {Function} // Function executed after operation is complete,
                    // given the returned data (Object) and a success indicator (Boolean)

e.g. <span class='black'>callback(<span class='blue'>responseData</span>, <span class='blue'>success</span>);<span class='black'>",
            :example => "var activityData = {
    \"sakai:activityMessage\": \"Bert Pareyn updated the description\"
};
sakai.api.Activity.createActivity(\"/p/JexeDwb\", \"content\", \"default\", activityData, function(responseData, success){
    if (success) {
        $(window).trigger(\"updateContentActivity.entity.sakai\", activityMessage);
    }
});"
            }
        } %>

        <a name="applythreedots"><h2>applyThreeDots</h2></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.applyThreeDots(body, width, params, optClass, alreadySecure)",
            :description => "Truncate a string of text using the threedots plugin",
            :parameters => "<strong>body</strong>          {String}  // String of text to be truncated
<strong>width</strong>         {int}     // Width of the parent element
<strong>params</strong>        {Object}  // Object containing parameters, Threedots plugin specific.
                        // The row limit for widget headers should be 4 rows.
<strong>optClass</strong>      {String}  // Optional class(es) to give container div. Used to give
                        // specific mark-up to the content to avoid wrong calculations.
                        // e.g. s3d-bold
<strong>alreadySecure</strong> {Boolean} // Optional, if the content needs to be run through safeOutput
                        // the Boolean should be set to true",
            :callback => "<strong>dotted</strong> {String} // String passed through the threedots API;

e.g. return \"The quick brown fo...\";",
            :example => "sakai.api.Util.applyThreeDots(\"The quick brown fox jumps over the lazy dog\", 100, {
    whole_word: false
}, \"s3d-bold\");"
            }
        } %>

        <a name="autosuggest"><h2>AutoSuggest</h2></a>
        <a name="setup"><h3>setup</h3></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.AutoSuggest.setup(element, options, callback, _dataFn)",
            :description => "Set up the Autosuggest for users and groups",
            :parameters => "<strong>element</strong>  {String|Object} // jQuery selection object or selector string.
<strong>options</strong>  {Object}        // JavaScript Object of optional parameters to extend or
                         // override defaults
<strong>callback</strong> {Function}      // Optional Callback to be executed after calling autosuggest
                         // plugin
<strong>_dataFn</strong>  {Function}      // Optional Function that pre-fetches data list for
                         // the autosuggest box",
            :callback => "<strong>obj</strong> {Object} // new jQuery object with autosuggest",
            :example => "var dataFn = function(query, add) {
    var q = 'query';
    var options = {
        'page': 0,
        'items': 15,
        'q': q,
        'userid': sakai.data.me.user.userid
    };
    var searchUrl = sakai.config.URL.POOLED_CONTENT_SPECIFIC_USER;

    sakai.api.Server.loadJSON(searchUrl.replace(\".json\", \"\"), function(success, data){
        if (success) {
            var suggestions = [];
            $.each(data.results, function(i) {
                suggestions.push(dataObj);
            });
            add(suggestions, query);
        }
    }, options);
};

sakai.api.Util.AutoSuggest.setup($(\"autosuggest_box\"), {
    retrieveLimit: 10
}, false, dataFn);"
            }
        } %>

        <a name="setuptagandcategoryautosuggest"><h3>setupTagAndCategoryAutosuggest</h3></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.AutoSuggest.setupTagAndCategoryAutosuggest($elt, options, $list_categories_button, initialSelections, callback)",
            :description => "Set up the tag + category autosuggest box",
            :parameters => "<strong>$elt</strong>                    {jQuery}   // The element to set up as the autosuggest box
<strong>options</strong>                 {Object}   // Options to pass through to the autoSuggest setup
<strong>$list_categories_button</strong> {jQuery}   // The button that should trigger the assignlocation
                                   // overlay
<strong>initialSelections</strong>       {Array}    // The inital selections for the autosuggest, direct
                                   // from the profile
<strong>callback</strong>                {Function} // Function to call after setup is complete",
            :callback => "None",
            :example => "sakai.api.Util.AutoSuggest.setupTagAndCategoryAutosuggest($(\".autosuggest_box\", $rootel), {
    scrollHeight: 120
}, $(\".autosuggest_location_button\", $rootel));"
            }
        } %>


        <a name="converttohumanreadablefilesize"><h2>convertToHumanReadableFileSize</h2></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.convertToHumanReadableFileSize(filesize)",
            :description => "Convert a file's size to a human readable size",
            :parameters => "<strong>filesize</strong> {Integer} // The file's size to convert",
            :callback => "<strong>size</strong> {String} // Filesize in readable format and localized
            
e.g. return '4.5 MB';",
            :example => "sakai.api.Util.convertToHumanReadableFileSize(result[\"_length\"]);"
            }
        } %>

        <a name="draggable"><h2>Draggable</h2></a>
        <a name="setupdraggable"><h3>setupDraggable</h3></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.Draggable.setupDraggable(params, $container)",
            :description => "Sets up draggables across the page or given container",
            :parameters => "<strong>params</strong> {Object}     // Optional parameters that override defaults
<strong>$container</strong> {Object} // container element to add draggables, defaults to 
                    // $(\"html\") if not set",
            :callback => "None",
            :example => "sakai.api.Util.Draggable.setupDraggable({
    helper: \"clone\",
    cursor: \"hand\"
}, $(\"#container_to_apply_to\"));


// Setting parameters can also be achieved through the data object in HTML.
// This HTML is automatically picked up by the API on render of the page
// but can not be applied to templates rendered after initial page load.<pre id=\"html\" class=\"prettyprint\">&lt;div id=\"container_to_apply_to\"&gt;
    &lt;ul&gt;
        &lt;li class=\"s3d-draggable-container\" data-helper=\"clone\" data-cursor=\"hand\"&gt;
            ...
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;</pre>"}
        } %>

        <a name="droppable"><h2>Droppable</h2></a>
        <a name="setupdroppable"><h3>setupDroppable</h3></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.Droppable.setupDroppable(params, $container)",
            :description => "Sets up containers that allow dropping of elements on them across the page or given container",
            :parameters => "<strong>params</strong> {Object}     // Optional parameters that override defaults
<strong>$container</strong> {Object} // container element to add droppable containers, defaults to 
                    // $(\"html\") if not set",
            :callback => "None",
            :example => "sakai.api.Util.Droppable.setupDroppable({
    tolerance: \"touch\",
    hoverClass: \"custom_class\"
}, $(\"#container_to_apply_to\"));


// Setting parameters can also be achieved through the data object in HTML.
// This HTML is automatically picked up by the API on render of the page
// but can not be applied to templates rendered after initial page load.<pre id=\"html\" class=\"prettyprint\">&lt;div id=\"container_to_apply_to\"&gt;
    &lt;div class=\"s3d-droppable-container\" data-tolerance=\"touch\" data-hoverClass=\"custom_class\"&gt;
        ...
    &lt;/div&gt;
&lt;/div&gt;</pre>"}
        } %>

        <a name="formattags"><h2>formatTags</h2></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.formatTags(inputTags)",
            :description => "Formats a comma separated string of text to an array of usable tags, filters out unwanted tags (e.g. empty tags), returns the array of tags and if no tags were provided or none were valid an empty array is returned",
            :parameters => "<strong>inputTags</strong> {Object}     // Unformated, comma separated, string of tags put in
                       // by a user",
            :callback => "tags {Array} // Array of formatted tags

e.g. return [\"Physics\", \"Advanced Mathematics 101\", \"Biology 201\";",
            :example => "var inputTags = $(\"#metadata_tag_input_field\").val();

debug.log(inputTags);
// \"  Physics   ,   , ,  Advanced Mathematics 101, , Biology 201  \"

var formattedTags = sakai.api.Util.formatTags(inputTags);

debug.log(formattedTags);
 // [\"Physics\", \"Advanced Mathematics 101\", \"Biology 201\"]"}
        } %>

        <a name="forms"><h2>Forms</h2></a>
        <a name="validate"><h3>validate</h3></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.formatTags(inputTags)",
            :description => "A wrapper for jquery.validate with a custom Sakai OAE styling.",
            :parameters => "<strong>$form</strong> {Object} // $form the jQuery element of the form in question
<strong>opts</strong> {Object}  // options to pass through to jquery.validate
               // NOTE: There is one additional option you can pass in
               // an error callback function
               // When there is an error in validation detected, it will be called
<strong>insertAfterLabel</strong> {Boolean} // Insert the error span after the label, not before",
            :callback => "None",
            :example => "var validateOpts = {
    rules: {
        password: {
            minlength: 4
        },
        password_repeat: {
            equalTo: \"#password\"
        },
        username: {
            minlength: 3,
            nospaces: true,
            validusername: true
        }
    },
    messages: {
        username: {
            required: $(\"#username_empty\").text(),
            minlength: $(\"#username_short\").text(),
            nospaces: $(\"#username_spaces\").text()
        },
        password: {
            required: $(\"#password_empty\").text(),
            minlength: $(\"#password_short\").text()
        }
    },
    submitHandler: function(form, validator){
        doLogin();
        return false;
    }
};

sakai.api.Util.Forms.validate($(\"#create_account_form\"), validateOpts, true);"}
        } %>

        <a name="hideonclickout"><h2>hideOnClickOut</h2></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.hideOnClickOut(elementToHide, ignoreElements, callback)",
            :description => "Sets up events to hide a dialog when the user clicks outside of it",
            :parameters => "<strong>elementToHide</strong> {String}  // a jquery selector, jquery object, dom element, or array
                        // thereof containing the element to be hidden, clicking this
                        // element or its children won't cause it to hide
<strong>ignoreElements</strong> {String} // any elements that match a jquery.is(ignoreElements)
                        // will not hide the target element when clicked
<strong>callback</strong> {function}     // a function to be called instead of the default
                        // jquery.hide()",
            :callback => "callback {function} // a function to be called instead of the default jquery.hide()",
            :example => "sakai.api.Util.hideOnClickOut(\"#settings_dropdown\", \".settings_icon\", function(){
    // Do some extra handling
    ...
    // Close the dialog
    $(\"#settings_dropdown\").jqmHide();
});"}
        } %>


        <a name="notification"><h2>notification</h2></a>
        <p>Utility functions related to notifications messages in Sakai3</p>
        <a name="show"><h3>show</h3></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.Notification.show(title, text, type, sticky)",
            :description => "Show notification messages in the top right corner of the screen",
            :parameters => "<strong>title</strong> {String}  // The notification title (if it is an empty string, the
                // title isn't shown)
<strong>text</strong> {String}   // The text you want to see appear in the body of the notification
<strong>type</strong> {Constant} // The type of the notification. If this is not supplied, we use
                // the type \"information\"
<strong>sticky</strong>{Boolean} // The sticky (if it is true, the notification doesn't disappear
                // without using action)",
            :callback => "None",
            :example => "sakai.api.Util.notification.show(sakai.api.i18n.getValueForKey(\"COLLECTION_CREATED\"),
                                 \"\",
                                 sakai.api.Util.notification.type.INFORMATION,
                                 false);

// 2 different types of notification exist
sakai.api.Util.notification.type.INFORMATION  // Default
sakai.api.Util.notification.type.ERROR"}
        } %>


        <a name="parsesakaidate"><h2>parseSakaiDate</h2></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.parseSakaiDate(dateInput)",
            :description => "Parse a ISO8601 date into a JavaScript date object.",
            :parameters => "<strong>dateInput</strong> {String}  // The date that needs to be converted to a JavaScript date
                    // object. If the format is in milliseconds, you need to provide
                    // an integer, otherwise a string",
            :callback => "dateOutput {Date} // parsed JavaScript Date",
            :example => "debug.log(oldDate);
// \"2012-01-31T17:44Z\"

var parsedDate = sakai.api.Util.parseSakaiDate(oldDate);

debug.log(parsedDate);
// Date \{Tue Jan 31 2012 17:44:00 GMT+0000 (GMT)\}"}
        } %>

        <a name="progressIndicator"><h2>progressIndicator</h2></a>
        <a name="showprogressIndicator"><h3>showProgressIndicator</h3></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.showProgressIndicator(title, body)",
            :description => "Shows a progress indicator on the screen in the form of an overlay and progress bar.",
            :parameters => "<strong>title</strong> {String} // Title of the indicator screen
<strong>body</strong>  {String} // Additional text to be shown in the indicator",
            :callback => "None",
            :example => "sakai.api.Util.showProgressIndicator(sakai.api.i18n.getValueForKey(\"CREATING_COLLECTION\"),
                                     sakai.api.i18n.getValueForKey(\"WONT_BE_LONG\"));"}
        } %>

        <a name="hideprogressIndicator"><h3>hideProgressIndicator</h3></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.hideProgressIndicator()",
            :description => "Hide the existing progress indicator.",
            :parameters => "None",
            :callback => "None",
            :example => "sakai.api.Util.hideProgressIndicator();"}
        } %>

        <a name="rendermath"><h2>renderMath</h2></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.renderMath(element)",
            :description => "Runs MathJax over an element replacing any math TeX with rendered formulas",
            :parameters => "<strong>element</strong> {String} // The element (or its id) that should be checked for math",
            :callback => "None",
            :example => "// Rendering the math in a whole widget:
sakai.api.Util.renderMath(tuid);"}
        } %>

        <a name="tagentity"><h2>tagEntity</h2></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.tagEntity(tagLocation, newTags, currentTags, callback)",
            :description => "Add and delete tags from an entity. To delete a tag don't pass that tag in the 'newTags' Array.",
            :parameters => "<strong>tagLocation</strong> {String}   // The URL to tag
<strong>newTags</strong>     {Array}    // The set of tags you wish to be on the entity
<strong>currentTags</strong> {Array}    // The set of tags on the current entity
<strong>callback</strong>    {Function} // The callback function",
            :callback => "<strong>success</strong> {Boolean} // Indicates success or failure of setting tags
<strong>newTags</strong> {Array}   // Array of new tags on the item

e.g. callback(success, newTags);",
            :example => "// Adding tags:
sakai.api.Util.tagEntity(\"/p/XwawEdaS\",    // tagLocation
                         [\"tag1\", \"tag2\"], // newTags
                         [\"tag1\"],         // currentTags
                         function(success, newTags){ // callback
    debug.log(success); // True or false
    debug.log(newTags); // If a success, newTags looks like this: [\"tag1\", \"tag2\"]
});

// Deleting tags:
sakai.api.Util.tagEntity(\"/p/XwawEdaS\",  // tagLocation
             [\"tag1\"],                   // newTags
             [\"tag1\", \"tag2\"],           // currentTags
             function(success, newTags){ // callback
    debug.log(success); // True or false
    debug.log(newTags); // If a success, newTags looks like this: [\"tag1\"]
});"}
        } %>

        <a name="templaterenderer"><h2>TemplateRenderer</h2></a>
        <%= render :partial => "sdk/apifunction", :locals => {:display => {
            :function => "sakai.api.Util.TemplateRenderer(templateElement, templateData, outputElement, doSanitize)",
            :description => "Renders the template with the given JSON object, inserts it into a certain HTML element if required, and returns the rendered HTML string. If an output element is specified the renderer scans for draggable/droppable classes and applies that functionality in the process.",
            :parameters => "<strong>templateElement</strong> {String|Object}      // The name of the template HTML ID or a jQuery
                                     // selection object.
<strong>templateData</strong>    {Object}             // JSON object containing the template data
<strong>outputElement</strong>   {Object}(Optional)   // jQuery element in which the template needs
                                     // to be rendered
<strong>doSanitize</strong>      {Boolean}(Optional)  // perform html sanitization. Defaults to true",
            :callback => "<strong>render</strong> {String} // Rendered string of HTML

e.g. return \"&lt;div&gt; ... &lt;/div&gt;\";",
            :example => "sakai.api.Util.TemplateRenderer(\"some_list_template\", {
    data: dataArr,
    sakai: sakai,
}, $(\"#some_list_container\"));

// The HTML for the templaterenderer should look like:<pre id=\"html\" class=\"prettyprint\">&lt;div id=\"some_list_template\"&gt;&lt;!--
    ...
    // content for template goes here
    ...
-->&lt;/div&gt;</pre>"}
        } %>
    </div>
</div>