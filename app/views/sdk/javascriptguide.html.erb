<% content_for :title do %> - SDK - CSS Guide<% end %>
<div id="cssguide" class="widgetsdk_container">
    <h1>JavaScript Guidelines</h1>
    <p>This section of the Widget SDK helps clarify the JavaScript guidelines used by the Sakai OAE project. These guidelines exist to improve readability and maintenance of the various JavaScript files in the system. The guide borrows heavily from the Node.js style guide but adds a few rules.</p>

    <ul class="inline_list">
        <li><%= link_to "Tabs vs Spaces", "#tabs-vs-spaces", :class => "wl-regular-link" %></li>
        <li><%= link_to "Semicolons", "#semicolons", :class => "wl-regular-link" %></li>
        <li><%= link_to "Editors", "#editors", :class => "wl-regular-link" %></li>
        <li><%= link_to "Trailing whitespace", "#trailing-whitespace", :class => "wl-regular-link" %></li>
        <li><%= link_to "Line length", "#line-length", :class => "wl-regular-link" %></li>
        <li><%= link_to "Quotes", "#quotes", :class => "wl-regular-link" %></li>
        <li><%= link_to "Braces", "#braces", :class => "wl-regular-link" %></li>
        <li><%= link_to "Variable declarations", "#variable-declarations", :class => "wl-regular-link" %></li>
        <li><%= link_to "Variable and property names", "#variable-and-property-names", :class => "wl-regular-link" %></li>
        <li><%= link_to "Class names", "#class-names", :class => "wl-regular-link" %></li>
        <li><%= link_to "Constants", "#constants", :class => "wl-regular-link" %></li>
        <li><%= link_to "Object / Array creation", "#object-array-creation", :class => "wl-regular-link" %></li>
        <li><%= link_to "Equality operator", "#equality-operator", :class => "wl-regular-link" %></li>
        <li><%= link_to "Extending prototypes", "#extending-prototypes", :class => "wl-regular-link" %></li>
        <li><%= link_to "Conditions", "#conditions", :class => "wl-regular-link" %></li>
        <li><%= link_to "Function length", "#function-length", :class => "wl-regular-link" %></li>
        <li><%= link_to "Return statements", "#return-statements", :class => "wl-regular-link" %></li>
        <li><%= link_to "Named closures", "#named-closures", :class => "wl-regular-link" %></li>
        <li><%= link_to "Nested Closures", "#nested-closures", :class => "wl-regular-link" %></li>
        <li><%= link_to "Callbacks", "#callbacks", :class => "wl-regular-link" %></li>
        <li><%= link_to "Object.freeze, Object.preventExtensions, Object.seal, with, eval", "#eval", :class => "wl-regular-link" %></li>
    </ul>

    <div class="wl-widget-item">
        <h2 id="tabs-vs-spaces">Tabs vs Spaces</h2>
        <p>4 spaces are used to indent lines of code. Any respectable editor will have the option of replacing tabs with spaces.</p>

        <h2 id="semicolons">Semicolons</h2>
        <p>Following standard coding practices, semicolons are used where appropriate.</p>

        <h2 id="editors">Editors</h2>
        <p>Any editor can be used. However, it's recommended to use an editor that respects these guidelines (tabs vs spaces, etc.) and a little syntax highlighting never hurt anyone. Frequently used editors in the team are TextMate and Aptana Studio.</p>

        <h2 id="trailing-whitespace">Trailing whitespace</h2>
        <p>Keeping code clean and simple starts with basics like whitespace. To keep your conscience clear have another look for extra spaces before committing your masterpiece.</p>

        <h2 id="line-length">Line Length</h2>
        <p>Limiting line length to about 80 characters will improve readability. Especially in complex statements where you want to remember what you were thinking in a few weeks from now (you do comment your code, right?).</p>

        <h2 id="quotes">Quotes</h2>
        <p>Use single quotes at all times, unless you are writing JSON.</p>
        <h4>Right:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
var foo = 'bar';
</pre>
        </div>
        <h4>Wrong:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
var foo = "bar";
</pre>
        </div>

        <h2 id="braces">Braces</h2>
        <p>Opening braces go on the same line as the statement.</p>
        <h4>Right:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
if (true) {
    debug.log('winning');
}
</pre>
        </div>
        <h4>Wrong:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
if (true)
{
    debug.log('losing');
}
</pre>
        </div>
        <p>Also notice the use of whitespace before and after the condition statement.</p>

        <h2 id="variable-declarations">Variable declarations</h2>
        <p>Declare one variable per statement and consolidate them at the top of your file, this improves readability and maintenance of the code.</p>
        <h4>Right:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
var keys = ['foo', 'bar'];
var values = [23, 42];

var object = {};
while (items.length) {
    var key = keys.pop();
    object[key] = values.pop();
}
</pre>
        </div>
        <h4>Wrong:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
var keys = ["foo", "bar"],
    values = [23, 42],
    object = {},
    key;

while (items.length) {
    key = keys.pop();
    object[key] = values.pop();
}
</pre>
        </div>

        <h2 id="variable-and-property-names">Variable and property names</h2>
        <p>Variables and properties should use lower camel case. It's also nice to have a variable that explains what it's used for.</p>
        <h4>Right:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
var adminUser = db.query('SELECT * FROM users ...');
</pre>
        </div>
        <h4>Wrong:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
var admin_user = d.query('SELECT * FROM users ...');
</pre>
        </div>

        <h2 id="class-names">Class names</h2>
        <p>Class names should be capitalized using the upper camel case.</p>
        <h4>Right:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
function BankAccount() {
}
</pre>
        </div>
        <h4>Wrong:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
function bank_Account() {
}
</pre>
        </div>

        <h2 id="constants">Constants</h2>
        <p>Constants should be declared as regular variables or static class properties, using all capital letters.</p>
        <h4>Right:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
var SECOND = 1 * 1000;
</pre>
        </div>
        <h4>Wrong:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
const second = 1 * 1000;
</pre>
        </div>

        <h2 id="object-array-creation">Object / Array creation</h2>
        <p>Use trailing commas and put short declarations on a single line. Don't quote the keys if not necessary but if you do be consistent and quote them all.</p>
        <h4>Right:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
var a = ['hello', 'world'];
var b = {
    'good': 'code',
    'is generally': 'pretty',
};
</pre>
        </div>
        <h4>Wrong:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
var a = [
    'hello', 'world'
];
var b = {"good": 'code'
        , is generally: 'pretty'
        };
</pre>
        </div>


        <h2 id="equality-operator">Equality operator</h2>
        <p>Don't take a guess at what you're comparing, use triple equality operators at all times.</p>
        <h4>Right:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
var a = 0;
if (a === '') {
    debug.log('winning');
}
</pre>
        </div>
        <h4>Wrong:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
var a = 0;
if (a == '') {
    debug.log('losing');
}
</pre>
        </div>

        <h2 id="extending-prototypes">Extending prototypes</h2>
        <p>Don't extend the prototypes of any objects.</p>
        <h4>Right:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
var a = [];
if (!a.length) {
    debug.log('winning');
}
</pre>
        </div>
        <h4>Wrong:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
Array.prototype.empty = function() {
    return !this.length;
}

var a = [];
if (a.empty()) {
    debug.log('losing');
}
</pre>
        </div>


        <h2 id="conditions">Conditions</h2>
        <p>Any non-trivial conditions should be assigned to a descriptive variable. This improves code readability.</p>
        <h4>Right:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
var isAuthorized = (user.isAdmin() || user.isModerator());
if (isAuthorized) {
    debug.log('winning');
}
</pre>
        </div>
        <h4>Wrong:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
if (user.isAdmin() || user.isModerator()) {
    debug.log('losing');
}
</pre>
        </div>

        <h2 id="function-length">Function length</h2>
        <p>Functions that are short are often easier to read. Splitting up your big functions into multiple smaller functions often helps. Try to keep function length between 10-15 lines.</p>
        <h2 id="return-statements">Return statements</h2>
        <p>Always try to return a function's value as soon as possible to avoid deep nesting of if-statements.</p>
        <h4>Right:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
var isPercentage = function(val) {
    if (val &lt; 0) {
        return false;
    }

    if (val &gt; 100) {
        return false;
    }

    return true;
};
</pre>
        </div>
        <h4>Wrong:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
function isPercentage(val) {
   if (val &gt;= 0) {
       if (val &lt; 100) {
           return true;
       } else {
           return false;
       }
   } else {
       return false;
   }
}
</pre>
        </div>
        <p>In this example it's also fine to shorten things even further:</p>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
var isPercentage = function(val) {
    var isInRange = (val &gt;= 0 &amp;&amp; val &lt;= 100);
    return isInRange;
};
</pre>
        </div>


        <h2 id="named-closures">Named closures</h2>
        <p>Give closures a name and preferably a separate function for improved readability and better stack traces.</p>
        <h4>Right:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
req.on('end', function onEnd() {
    debug.log('winning');
});
</pre>
        </div>
        <h4>Wrong:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
req.on('end', function() {
    debug.log('losing');
});
</pre>
        </div>
        <p>The same rule applies to iterations, check out the following example:</p>
        <h4>Right:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
var iterateItems = function(index, item) {
    debug.log('winning');
};

var items = ['item1', 'item2', 'item3', 'item4', 'item5'];

$.each(items, iterateItems);
</pre>
        </div>
        <h4>Wrong:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
var items = ['item1', 'item2', 'item3', 'item4', 'item5'];

$.each(items, function(index, item) {
    debug.log('losing');
});
</pre>
        </div>

        <h2 id="nested-closures">Nested closures</h2>
        <p>Don't nest closures as it makes a mess out of your code.</p>
        <h4>Right:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
var afterConnect = function() {
    debug.log('winning');
};

setTimeout(function() {
    client.connect(afterConnect);
}, 1000);
</pre>
        </div>
        <h4>Wrong:</h4>
        <div class="navigationalitems_codesnippit_container few_lines">
<pre>
setTimeout(function() {
    client.connect(function() {
        debug.log('losing');
    });
}, 1000);
</pre>
        </div>

        <h2 id="callbacks">Callbacks</h2>
        <p>Functions often return data by using callbacks. All API functions that return data do this through a callback function and it's recommended you use them.</p>
        <h2 id="eval">Object.freeze, Object.preventExtensions, Object.seal, with, eval</h2>
        <p>Evil! Please avoid these.</p>
    </div>

    <div class="wl-widget-item">
        <img src="/assets/developer_sad_smiley_icon.png" class="wl-left" alt="Visit the FAQ"><h3 class="widgetsdk_header_icon_text">Check out our <a class="wl-regular-link" href="/sdk/faq">FAQ</a> or add a comment below if you didn’t find what you were looking for on this page.</h3>
    </div>
</div>